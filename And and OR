 import numpy as np
 class Perceptron:
    def __init__(self, input_size, learning_rate=0.1, epochs=20):
        self.weights = np.zeros(input_size + 1)  # +1 for bias
        self.lr = learning_rate
        self.epochs = epochs
    def activation(self, x):
        return 1 if x >= 0 else 0
    def predict(self, x):
        z = np.dot(x, self.weights[1:]) + self.weights[0]  # bias + dot product
        return self.activation(z)
    def train(self, X, y):
        for _ in range(self.epochs):
            for xi, target in zip(X, y):
                prediction = self.predict(xi)
                error = target - prediction
                self.weights[1:] += self.lr * error * xi
                self.weights[0] += self.lr * error  # update bias
    def evaluate(self, X):
        return [self.predict(x) for x in X]
 # Input and output for AND and OR gates
 X = np.array([[0,0], [0,1], [1,0], [1,1]])
 Y_AND = np.array([0, 0, 0, 1])
 Y_OR = np.array([0, 1, 1, 1])
 # AND Gate
 print("Training Perceptron for AND Gate")
 p_and = Perceptron(input_size=2)
 p_and.train(X, Y_AND)
 print("Predictions for AND Gate:", p_and.evaluate(X))
 # OR Gate
 print("\nTraining Perceptron for OR Gate")
 p_or = Perceptron(input_size=2)
 p_or.train(X, Y_OR)
 print("Predictions for OR Gate:", p_or.evaluate(X))
