import pandas as pd
import numpy as np
import zipfile
import io
import requests
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from tensorflow import keras
from tensorflow.keras import layers

# --- Step 1: Download and Load the Dataset ---
url = "https://archive.ics.uci.edu/static/public/275/bike+sharing+dataset.zip"
r = requests.get(url)
z = zipfile.ZipFile(io.BytesIO(r.content))
day_data = pd.read_csv(z.open("day.csv"))

# --- Step 2: Data Preprocessing ---

# Drop non-useful or leakage columns
day_data = day_data.drop(columns=["instant", "dteday", "casual", "registered"])

# Features and Target
X = day_data.drop("cnt", axis=1)
y = day_data["cnt"]

# Feature Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

# --- Step 3: Build the Neural Network Model ---
model = keras.Sequential([
    layers.Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    layers.Dense(64, activation='relu'),
    layers.Dense(1)  # Output layer for regression
])

# Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# Add EarlyStopping
early_stop = keras.callbacks.EarlyStopping(patience=5, restore_best_weights=True)

# --- Step 4: Train the Model ---
history = model.fit(
    X_train, y_train,
    epochs=100,
    batch_size=32,
    validation_split=0.2,
    callbacks=[early_stop],
    verbose=1
)

# --- Step 5: Evaluate the Model ---
loss, mae = model.evaluate(X_test, y_test)
print(f"\nTest MAE: {mae:.2f}")

# Predict on test set
y_pred = model.predict(X_test).flatten()

# Error Metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Test MSE: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# --- Step 6: Visualize Training Performance ---
plt.figure(figsize=(10, 5))
plt.plot(history.history['loss'], label='Training Loss (MSE)')
plt.plot(history.history['val_loss'], label='Validation Loss (MSE)')
plt.title('Model Training Performance')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()
